name: UI Tests

on:
  pull_request:

jobs:
  ui-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Web app (Next.js) ---
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install web dependencies
        run: yarn install --frozen-lockfile

      - name: Build web
        run: yarn build

      - name: Start web (port 3000)
        run: |
          PORT=3000 yarn start >/dev/null 2>&1 &
          echo $! > web.pid

      - name: Wait for app to be ready
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:3000 >/dev/null; then
              echo "App is up"
              exit 0
            fi
            sleep 2
          done
          echo "App did not become ready in time"
          exit 1

      # --- Python + Selenium tests ---
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        working-directory: serhatozdursun-ui-tests
        run: pip install -r requirements.txt

      # Browsers
      - name: Set up Chrome
        if: matrix.browser == 'chrome'
        uses: browser-actions/setup-chrome@v1

      - name: Set up Firefox
        if: matrix.browser == 'firefox'
        uses: browser-actions/setup-firefox@v1

      - name: Install GeckoDriver
        if: matrix.browser == 'firefox'
        uses: browser-actions/setup-geckodriver@v1
        with:
          geckodriver-version: latest

      # Cache webdriver_manager downloads (avoids re-hitting GitHub API)
      - name: Cache WebDriver binaries
        uses: actions/cache@v4
        with:
          path: ~/.wdm
          key: wdm-${{ runner.os }}-${{ matrix.browser }}
          restore-keys: |
            wdm-${{ runner.os }}-

      - name: Run tests on ${{ matrix.browser }}
        id: run_tests
        working-directory: serhatozdursun-ui-tests
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # avoid GitHub API rate limit
          WDM_LOCAL: '1' # prefer cache if available
        run: |
          mkdir -p reports/html
          pytest \
            --browser ${{ matrix.browser }} \
            --base_url http://localhost:3000 \
            --html=reports/html/report.html \
            --junitxml=reports/report.xml

      # Single, combined artifact upload (HTML + XML), with retention
      - name: Upload reports (${{ matrix.browser }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ui-test-reports-${{ matrix.browser }}
          path: |
            serhatozdursun-ui-tests/reports/html/report.html
            serhatozdursun-ui-tests/reports/report.xml
          retention-days: 5

      - name: Stop web
        if: always()
        run: |
          if [ -f web.pid ]; then
            kill "$(cat web.pid)" || true
          fi

      - name: Send Failure Email for ${{ matrix.browser }}
        if: failure()
        env:
          EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
          EMAILJS_TEMPLATE_ID: ${{ secrets.EMAILJS_TEMPLATE_ID }}
          EMAILJS_USER_ID: ${{ secrets.EMAILJS_USER_ID }} # or EMAILJS_PUBLIC_KEY with 'publicKey'
        run: |
          ARTIFACTS_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          cat <<EOF > email-payload-failure.json
          {
            "service_id": "${EMAILJS_SERVICE_ID}",
            "template_id": "${EMAILJS_TEMPLATE_ID}",
            "user_id": "${EMAILJS_USER_ID}",
            "template_params": {
              "title": "❌ UI Test Failed",
              "result": "failed",
              "browser": "${{ matrix.browser }}",
              "commit": "${{ github.sha }}",
              "artifacts_link": "${ARTIFACTS_LINK}"
            }
          }
          EOF
          curl -X POST https://api.emailjs.com/api/v1.0/email/send \
            -H 'origin: http://localhost' \
            -H 'Content-Type: application/json' \
            -d @email-payload-failure.json

      - name: Send Success Email for ${{ matrix.browser }}
        if: success()
        env:
          EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
          EMAILJS_TEMPLATE_ID: ${{ secrets.EMAILJS_TEMPLATE_ID }}
          EMAILJS_USER_ID: ${{ secrets.EMAILJS_USER_ID }} # or EMAILJS_PUBLIC_KEY with 'publicKey'
        run: |
          ARTIFACTS_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          cat <<EOF > email-payload-success.json
          {
            "service_id": "${EMAILJS_SERVICE_ID}",
            "template_id": "${EMAILJS_TEMPLATE_ID}",
            "user_id": "${EMAILJS_USER_ID}",
            "template_params": {
              "title": "✅ UI Test Passed",
              "result": "passed successfully",
              "browser": "${{ matrix.browser }}",
              "commit": "${{ github.sha }}",
              "artifacts_link": "${ARTIFACTS_LINK}"
            }
          }
          EOF
          curl -X POST https://api.emailjs.com/api/v1.0/email/send \
            -H 'origin: http://localhost' \
            -H 'Content-Type: application/json' \
            -d @email-payload-success.json
