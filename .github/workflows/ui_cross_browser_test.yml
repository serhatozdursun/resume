name: UI Automation Tests

on:
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chrome, firefox]

    steps:
      - name: Checkout resume repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies and build
        run: |
          yarn install
          yarn build

      - name: Start the application
        run: |
          yarn start &
        env:
          PORT: 3000

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install ${{ matrix.browser }} and driver
        if: matrix.browser == 'chrome'
        run: |
          sudo apt update
          sudo apt install -y wget gnupg
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt install -y ./google-chrome-stable_current_amd64.deb
          CHROMEDRIVER_VERSION=$(curl -sS https://chromedriver.storage.googleapis.com/LATEST_RELEASE)
          wget https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/chromedriver
          sudo chmod +x /usr/local/bin/chromedriver

      - name: Set up Firefox and GeckoDriver
        if: matrix.browser == 'firefox'
        uses: browser-actions/setup-firefox@latest

      - name: Clone the test repository
        run: |
          git clone https://github.com/serhatozdursun/serhatozdursun-ui-tests.git
        env:
          GITHUB_TOKEN: ${{ secrets.UI_TEST_TOKEN }}

      - name: Install Python dependencies
        working-directory: serhatozdursun-ui-tests
        run: |
          pip install -r requirements.txt

      - name: Run tests on ${{ matrix.browser }}
        working-directory: serhatozdursun-ui-tests
        id: run_tests
        run: |
          pytest --browser ${{ matrix.browser }} --base_url http://localhost:3000 --html=reports/html/report.html --junitxml=reports/report.xml

      - name: Upload HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: html-report-${{ matrix.browser }}
          path: serhatozdursun-ui-tests/reports/html
          retention-days: 5
        continue-on-error: true

      - name: Upload XML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xml-report-${{ matrix.browser }}
          path: serhatozdursun-ui-tests/reports/report.xml
          retention-days: 5
        continue-on-error: true
      # ✅ Always zip HTML report
      - name: Zip HTML Report for ${{ matrix.browser }}
        run: |
          REPORT_DIR="serhatozdursun-ui-tests/reports/html"
          if [ -d "$REPORT_DIR" ]; then
            zip -r "report-${{ matrix.browser }}.zip" "$REPORT_DIR"
          else
            echo "No HTML report directory found for ${{ matrix.browser }}"
          fi

      # ✅ Always encode it to base64
      - name: Encode Zipped Report for ${{ matrix.browser }}
        run: |
          if [ -f "report-${{ matrix.browser }}.zip" ]; then
            base64 "report-${{ matrix.browser }}.zip" > "encoded-report-${{ matrix.browser }}.txt"
          else
            echo "No report zip found to encode for ${{ matrix.browser }}"
          fi

      # ❌ Send failure email (if tests failed)
      - name: Send Failure Email for ${{ matrix.browser }}
        if: failure()
        env:
          EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
          EMAILJS_TEMPLATE_ID: ${{ secrets.EMAILJS_TEMPLATE_ID }}
          EMAILJS_USER_ID: ${{ secrets.EMAILJS_USER_ID }}
        run: |
          ENCODED=$(awk '{printf "%s", $0}' encoded-report-${{ matrix.browser }}.txt 2>/dev/null || echo "Report not available")

          cat <<EOF > email-payload-failure.json
          {
            "service_id": "${EMAILJS_SERVICE_ID}",
            "template_id": "${EMAILJS_TEMPLATE_ID}",
            "user_id": "${EMAILJS_USER_ID}",
            "template_params": {
              "subject": "❌ UI Test Failed - ${{ matrix.browser }}",
              "message": "Tests failed on browser: ${{ matrix.browser }}\nCommit: ${{ github.sha }}\nRun: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\nBase64 encoded report (truncated):\n${ENCODED:0:500}..."
            }
          }
          EOF
          
          curl -X POST https://api.emailjs.com/api/v1.0/email/send \
          -H 'origin: http://localhost' \
          -H 'Content-Type: application/json' \
          -d @email-payload-failure.json


      # ✅ Send success email (if tests passed)
      - name: Send Success Email for ${{ matrix.browser }}
        if: success()
        env:
          EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
          EMAILJS_TEMPLATE_ID: ${{ secrets.EMAILJS_TEMPLATE_ID }}
          EMAILJS_USER_ID: ${{ secrets.EMAILJS_USER_ID }}
        run: |
          ENCODED=$(awk '{printf "%s", $0}' encoded-report-${{ matrix.browser }}.txt 2>/dev/null || echo "Report not available")
        
          cat <<EOF > email-payload.json
          {
            "service_id": "${EMAILJS_SERVICE_ID}",
            "template_id": "${EMAILJS_TEMPLATE_ID}",
            "user_id": "${EMAILJS_USER_ID}",
            "template_params": {
              "subject": "✅ UI Test Passed - ${{ matrix.browser }}",
              "message": "Tests passed on browser: ${{ matrix.browser }} 🎉\nCommit: ${{ github.sha }}\nRun: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\nBase64 encoded report (truncated):\n${ENCODED:0:500}..."
            }
          }
          EOF
          
          curl -X POST https://api.emailjs.com/api/v1.0/email/send \
          -H 'origin: http://localhost' \
          -H 'Content-Type: application/json' \
            -d @email-payload.json